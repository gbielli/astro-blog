---
import { documentToHtmlString } from '@contentful/rich-text-html-renderer';
import { BLOCKS } from '@contentful/rich-text-types';
import { Image } from 'astro:assets';
import Card from './Card.astro';

const { content } = Astro.props;

const options = {
  renderNode: {
    [BLOCKS.EMBEDDED_ASSET]: (node: any) => {
      // Return a marker for image that we'll replace later
      return `<div data-image-url="${node.data.target.fields.file.url}" data-image-alt="${node.data.target.fields.description || ''}"></div>`;
    },
    [BLOCKS.EMBEDDED_ENTRY]: (node: any) => {
      if (node.data.target.sys.id === 'hcKaG7XB6XAbVJION2hWi') {
        return `<div data-card-id="${node.data.target.sys.id}"></div>`;
      }
      return '';
    },
    [BLOCKS.PARAGRAPH]: (node: any) => {
      return `<p class="mb-4">${node.content.map((n: any) => n.value).join('')}</p>`;
    },
  }
};

const htmlContent = documentToHtmlString(content, options);

// Split content for both images and cards
const splitContent = htmlContent.split(/(<div data-(?:image-url|card-id)="[^"]+(?:"[^"]*")*[^"]*"><\/div>)/);

// Function to extract attributes from marker div
const extractImageAttributes = (marker: string) => {
  const urlMatch = marker.match(/data-image-url="([^"]+)"/);
  const altMatch = marker.match(/data-image-alt="([^"]*)"/);
  return {
    url: urlMatch ? urlMatch[1] : '',
    alt: altMatch ? altMatch[1] : ''
  };
};
---

{splitContent.map((fragment) => {
  if (!fragment.startsWith('<div data-')) {
    // Regular content
    return <Fragment set:html={fragment} />;
  } else if (fragment.includes('data-image-url')) {
    // Image content
    const { url, alt } = extractImageAttributes(fragment);
    return (
      <div class="aspect-video mx-auto mb-4">
        <Image 
          src={url} 
          alt={alt}
          width={800}
          height={450}
          loading="eager"
          class="w-full h-full object-cover"
        />
      </div>
    );
  } else {
    // Card content
    const cardId = fragment.match(/data-card-id="([^"]+)"/)?.[1];
    const cardData = content.content
      .find((node: any) => 
        node.nodeType === BLOCKS.EMBEDDED_ENTRY && 
        node.data.target.sys.id === cardId
      )?.data.target;
    
    return cardData && <Card fields={cardData.fields} />;
  }
})}

<style>
  :global(img) {
    width: 100%;
    object-fit: cover;
  }
</style>