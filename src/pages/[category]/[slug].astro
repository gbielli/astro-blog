---
import RichText from '@/components/RichText.astro';
import ArticleLayout from '@/layouts/ArticleLayout.astro';
import type { BlogPost } from '@/lib/contentful';
import { contentfulClient } from '@/lib/contentful';
import { slugify } from '@/lib/utils';
import '@/styles/global.css';
import { Image } from 'astro:assets';

interface Fields {
  fields: {
    title: string;
    content: any;
    chapter1: string;
    slug?: string;
    media?: {
      fields: {
        file: {
          url: string;
        };
        description: string;
      };
    };
  };
  sys: {
    id: string;
  };
}

interface Props {
  entry: Fields;
}

export async function getStaticPaths() {
  try {
    const entries = await contentfulClient.getEntries<BlogPost>({
      content_type: 'blogPost',
      include: 2
    });

    const paths = entries.items
      .filter(entry => {
        // Vérifier que chapter1 existe et n'est pas vide
        if (!entry?.fields?.chapter1) {
          console.warn(`Entrée ${entry?.sys?.id} ignorée: chapter1 manquant`);
          return false;
        }
        return true;
      })
      .map(entry => {
        // Générer des slugs avec des valeurs par défaut
        const categorySlug = slugify(entry.fields.chapter1) || 'uncategorized';
        const pageSlug = entry.fields.slug 
          ? slugify(entry.fields.slug)
          : entry.sys.id;

        return {
          params: {
            category: categorySlug,
            slug: pageSlug
          },
          props: { 
            entry: {
              fields: {
                title: entry.fields.title || '',
                content: entry.fields.content,
                chapter1: entry.fields.chapter1,
                media: entry.fields.media,
                slug: entry.fields.slug
              },
              sys: {
                id: entry.sys.id
              }
            }
          }
        };
      });

    // Vérification des chemins générés
    if (paths.length === 0) {
      console.warn('Aucun chemin valide généré');
    }

    return paths;
  } catch (error) {
    console.error('Erreur lors de la génération des chemins:', error);
    throw error;
  }
}

const { entry } = Astro.props;
const { title = '', content = null, media = null, chapter1 = '' } = entry.fields;

// Ajouter le préfixe https: à l'URL de manière sécurisée
const mediaUrl = media?.fields?.file?.url 
  ? `https:${media.fields.file.url}` 
  : undefined;

// Générer le slug de catégorie de manière sécurisée
const categorySlug = slugify(chapter1) || 'uncategorized';
---

<ArticleLayout title={title}>
  <article class="mx-auto max-w-3xl block">
    <a 
      href={`/${categorySlug}/`}
      class="text-gray-600 hover:text-gray-900 mb-4 inline-block"
    >
      ← Retour à {chapter1}
    </a>

    <h1 class="text-5xl text-center">{title}</h1>
    <p class="text-center text-gray-600">
      Lorem ipsum dolor sit amet consectetur adipisicing elit.
    </p>
    
    {mediaUrl && (
      <Image 
        src={mediaUrl}
        alt={media?.fields?.description || title}
        width={768} 
        height={432} 
        class="mx-auto aspect-video object-cover mb-8"
        loading="eager"
        fetchpriority="high"
        format="webp"
        quality={85}
      />
    )}
    
    {content && <RichText content={content} />}
  </article>
</ArticleLayout>