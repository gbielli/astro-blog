---
import Author from '@/components/Author.astro';
import RichText from '@/components/RichText.astro';
import ArticleLayout from '@/layouts/ArticleLayout.astro';
import type { BlogPost } from '@/lib/contentful';
import { contentfulClient } from '@/lib/contentful';
import { slugify } from '@/lib/utils';
import '@/styles/global.css';
import { Image } from 'astro:assets';

interface Fields {
  fields: {
    title: string;
    content: any;
    chapter1: string;
    slug?: string;
    description?: string;
    publishDate?: string;
    author?: string;
    media?: {
      fields: {
        file: {
          url: string;
          details?: {
            image?: {
              width: number;
              height: number;
            };
          };
        };
        description: string;
      };
    };
  };
  sys: {
    id: string;
    createdAt: string;
    updatedAt: string;
  };
}

interface Props {
  entry: Fields;
}

export async function getStaticPaths() {
  try {
    const entries = await contentfulClient.getEntries<BlogPost>({
      content_type: 'blogPost',
      include: 2,
    });
    

    const paths = entries.items
      .filter(entry => {
        if (!entry?.fields?.chapter1) {
          console.warn(`Entrée ${entry?.sys?.id} ignorée: chapter1 manquant`);
          return false;
        }
        return true;
      })
      .map(entry => {
        
        const categorySlug = slugify(entry.fields.chapter1) || 'uncategorized';
        const pageSlug = slugify(entry.fields.slug) || ''

        return {
          params: {
            category: categorySlug,
            slug: pageSlug
          },
          props: { 
            entry: {
              fields: {
                title: entry.fields.title || '',
                content: entry.fields.content,
                chapter1: entry.fields.chapter1,
                description: entry.fields.description,
                publishDate: entry.sys.createdAt,
                author: entry.fields.author,
                media: entry.fields.media,
                slug: entry.fields.slug
              },
              sys: {
                id: entry.sys.id,
                createdAt: entry.sys.createdAt,
                updatedAt: entry.sys.updatedAt
              }
            }
          }
        };
      });

    if (paths.length === 0) {
      console.warn('Aucun chemin valide généré');
    }

    return paths;
  } catch (error) {
    console.error('Erreur lors de la génération des chemins:', error);
    throw error;
  }
}

const { entry } = Astro.props;
const { 
  title = '', 
  content = null, 
  media = null, 
  chapter1 = '',
  description = '',
  publishDate,
  author = 'Guillaume'
} = entry.fields;

const { createdAt, updatedAt } = entry.sys;

const mediaUrl = media?.fields?.file?.url 
  ? `https:${media.fields.file.url}` 
  : undefined;

const categorySlug = slugify(chapter1) || 'uncategorized';

// Dimensions optimales pour l'image
const imageWidth = media?.fields?.file?.details?.image?.width || 1200;
const imageHeight = media?.fields?.file?.details?.image?.height || 675;

// Construction des métadonnées structurées
const structuredData = {
  "@context": "https://schema.org",
  "@type": "Article",
  "headline": title,
  "description": description,
  "image": mediaUrl,
  "author": {
    "@type": "Person",
    "name": author
  },
  "datePublished": createdAt,
  "dateModified": updatedAt,
  "articleSection": chapter1,
  "publisher": {
    "@type": "Organization",
    "name": "Les badineurs",
    "logo": {
      "@type": "ImageObject",
      "url": "https://votre-site.com/logo.png"
    }
  }
};
---

<ArticleLayout 
  title={title}
  description={description}
  image={mediaUrl}
  articleDate={new Date(publishDate || createdAt)}
  author={author}
>
  <article class="mx-auto max-w-3xl block" itemscope itemtype="https://schema.org/Article">
    <nav class="mb-8" aria-label="Breadcrumb">
      <ol class="flex items-center space-x-2 text-sm">
        <li><a href="/" class="hover:text-gray-900">Accueil</a></li>
        <li>/</li>
        <li>
          <a 
            href={`/${categorySlug}/`}
            class="hover:text-gray-900"
          >
            {chapter1}
          </a>
        </li>
      </ol>
    </nav>

    <header class="mb-8">
      <h1 class="text-5xl text-center mb-4" itemprop="headline">{title}</h1>
      {description && (
        <p class="text-center text-gray-600 text-lg mb-4" itemprop="description">
          {description}
        </p>
      )}
      <div class="text-center text-sm text-gray-500">
        <!-- <time datetime={publishDate || createdAt} itemprop="datePublished">
          {formatDate(publishDate || createdAt)}
        </time> -->
        {author && (
          <Author author={author} />
        )}
      </div>
    </header>
    
    {mediaUrl && (
      <figure class="mb-8">
        <Image 
          src={mediaUrl}
          alt={media?.fields?.description || title}
          width={imageWidth} 
          height={imageHeight} 
          class="mx-auto aspect-video object-cover"
          loading="eager"
          fetchpriority="high"
          format="webp"
          quality={85}
          itemprop="image"
        />
        {media?.fields?.description && (
          <figcaption class="text-center text-sm text-gray-500 mt-2">
            {media.fields.description}
          </figcaption>
        )}
      </figure>
    )}
    
    <div itemprop="articleBody">
      {content && <RichText content={content} />}
    </div>
  </article>

  <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
</ArticleLayout>